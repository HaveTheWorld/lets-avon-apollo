scalar Date

type Query {
	getCurrentUser: UserType
	getAllCompanies: [CompanyType]
	getAllCatalogs(current: Boolean): [CatalogType]
	getCatalog(company: String!, name: String!): CatalogType
}

type Mutation {
	loginUser(username: String!, password: String!): TokenType
	addCompany(name: String!, startDate: Date!, finishDate: Date!): CompanyType
	removeCompany(id: ID!): Boolean
	uploadCatalogImage(catalog: String!, company: CompanyInput!, file: Upload!, withFace: Boolean): UploadedCatalogImageType
	addCatalog(catalog: String!, title: String!, company: CompanyInput!, images: CatalogImagesInput!): CatalogType
	removeCatalog(id: ID!): Boolean
}

type TokenType {
	token: String!
}

type UserType {
	id: ID!
	username: String!
	password: String!
	isAdmin: Boolean
}

type CompanyType {
	id: ID!
	name: String!
	startDate: Date!
	finishDate: Date!
	catalogs: [CatalogType]
}

type UploadedCatalogImageType {
	original: ImageType!
	thumbnail: ImageType!
	face: ImageType
}

type ImageType {
	id: ID!
	path: String!
}

type CatalogType {
	id: ID!
	name: String!
	title: String!
	company: CompanyType!
	face: ImageType!
	thumbnails: [ImageType]!
	originals: [ImageType]!
}

input CompanyInput {
	id: ID!
	name: String!
}

input CatalogImagesInput {
	face: ID!
	originals: [ID!]!
	thumbnails: [ID]!
}