scalar Date

type Query {
	currentUser: User
	users: [User]
	user(username: String!): User
	companies: [Company]
	currentCompany: Company
	catalogs: [Catalog]
	catalog(number: String!, year: String!, name: String!): Catalog
}

type Mutation {
	loginUser(username: String!, password: String!): Login
	addUser(username: String!, password: String!, role: String): User
	removeUser(id: ID!): Boolean
	editUser(id: ID!, username: String, password: String, role: String): User
	addCompany(input: AddCompanyInput!): Company
	removeCompany(id: ID!): Boolean
	uploadCatalogImage(input: AddCatalogImageInput!): [Image]
	addCatalog(input: AddCatalogInput!): Catalog
	removeCatalog(catalogId: ID!, companyId: ID!): Boolean
}

type Login {
	user: User!
	token: String!
	expires: Date!
}

type User {
	id: ID!
	username: String!
	password: String!
	role: String!
	canBeRemoved: Boolean!
}

type Company {
	id: ID!
	number: String!
	year: String!
	startDate: Date!
	finishDate: Date!
	catalogs: [Catalog]!
}

type Image {
	id: ID!
	path: String!
	catalogThumbPath: String
	catalogFacePath: String
	catalogIndex: Int
}

type Catalog {
	id: ID!
	name: String!
	title: String!
	company: Company!
	count: Int!
	images: [Image!]!
}

input AddCompanyInput {
	number: Int!
	year: Int!
	startDate: Date!
	finishDate: Date!
}

input AddCatalogImageInput {
	catalogName: String!
	companyId: ID!
	companyName: String!
	file: Upload!
	index: Int!
	length: Int!
}

input AddCatalogInput {
	name: String!
	title: String!
	companyId: ID!
	imagesIds: [ID!]!
}