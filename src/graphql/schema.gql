scalar Date

type Query {
	currentUser: User
	getAllCompanies: [CompanyType]
	getAllCatalogs(current: Boolean): [CatalogType]
	getCatalog(number: String!, year: String!, name: String!): CatalogType
}

type Mutation {
	loginUser(username: String!, password: String!): Login
	addCompany(number: Int!, year: Int!, startDate: Date!, finishDate: Date!): CompanyType
	removeCompany(id: ID!): Boolean
	uploadCatalogImage(catalogName: String!, companyId: ID!, companyName: String!, file: Upload!, index: Int!, length: Int!): [ImageType]
	addCatalog(name: String!, title: String!, companyId: ID!, imagesIds: [ID]!): CatalogType
	removeCatalog(catalogId: ID!, companyId: ID!): Boolean
}

type Login {
	user: User!
	token: String!
	expires: Date!
}

type User {
	id: ID!
	username: String!
	password: String!
	role: String!
}

type CompanyType {
	id: ID!
	number: String!
	year: String!
	startDate: Date!
	finishDate: Date!
	catalogs: [CatalogType]
}

type ImageType {
	id: ID!
	path: String!
	catalogThumbPath: String
	catalogFacePath: String
	catalogIndex: Int
}

type CatalogType {
	id: ID!
	name: String!
	title: String!
	company: CompanyType!
	count: Int!
	images: [ImageType!]!
}